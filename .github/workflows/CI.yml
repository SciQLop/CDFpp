name: GH Actions

on:
  release:
    types: [published]
  push:
  pull_request:

jobs:
  build_sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          architecture: x64
      - name: Build sdist
        run: |
            python -m pip install --upgrade "meson" "ninja" "numpy" "meson-python>=0.14.0" "build" "wheel" "twine" "auditwheel"
            python -m build -n --sdist .
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: source
          path: dist/*.tar.gz

  build_linux:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux2014_x86_64
    strategy:
      fail-fast: false
      matrix:
        python-version: ['cp38-cp38', 'cp39-cp39', 'cp310-cp310', 'cp311-cp311', 'cp312-cp312']
    steps:
      - name: add Python dir to path
        run: |
            echo "/opt/python/${{ matrix.python-version }}/bin" >> $GITHUB_PATH
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Build for Python ${{ matrix.python-version }}
        run: |
          git config --global --add safe.directory '*'
          pip install --upgrade "meson" "ninja" "numpy" "meson-python>=0.14.0" "build" "wheel" "twine" "auditwheel"
          python3 -m build --wheel --no-isolation  .
          rename 'linux_x86_64' 'manylinux_2_28_x86_64' dist/*.whl
          #python scripts/build_wheel.py
      - name: Make wheels universal
        run: for wheel in $(ls dist/*.whl); do auditwheel repair $wheel; done
      - name: Save packages as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: wheelhouse/*.whl

  build_osx_and_windows:
    strategy:
      matrix:
        os: [macos-11,  windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: install dependencies
        run: |
          pip install --upgrade twine build ninja wheel meson numpy meson-python>=0.14.0
      - uses: ilammy/msvc-dev-cmd@v1
        if: runner.os == 'Windows'
        with:
          arch: amd64
      - name: build package
        if: runner.os == 'Windows'
        run: |
          python3 -m build --wheel --no-isolation  .
      - name: build package
        if: runner.os != 'Windows'
        run: |
          CC=gcc-11 CXX=g++-11 python3 -m build --wheel --no-isolation  .
      - name: Save packages as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist/*.whl

  test_wheels:
    needs: [build_osx_and_windows, build_linux]
    strategy:
      matrix:
        os: [macos-11, windows-latest, ubuntu-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - uses: actions/download-artifact@v3
        with:
          name: wheels
          path: dist
      - name: install wheel (Unix)
        if: runner.os != 'Windows'
        run: |
          pip install --find-links $GITHUB_WORKSPACE/dist pycdfpp
      - name: install wheel (Windows)
        if: runner.os == 'Windows'
        run: |
          pip install --find-links $env:GITHUB_WORKSPACE\dist pycdfpp
      - uses: actions/checkout@v3
      - name: run tests
        run: |
          pip install ddt requests
          python tests/full_corpus/test_full_corpus.py

  build_macos_arm:
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - name: add pyenv to path
        run: |
          echo "$HOME/.pyenv/shims" >> $GITHUB_PATH
      - name: install dependencies
        run: |
          brew install pyenv
          pyenv install ${{ matrix.python-version }}
          pyenv local ${{ matrix.python-version }}
          python3 -m pip install meson numpy ninja build wheel twine meson-python>=0.14.0
      - name: build package
        run: |
          pyenv local ${{ matrix.python-version }}
          CC=gcc-13 CXX=g++-13 python3 -m build --wheel --no-isolation  .
      - name: Save packages as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist/*.whl

  test_wheels_macos_arm:
    needs: build_macos_arm
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    runs-on: self-hosted
    steps:
      - name: add pyenv to path
        run: |
          echo " ~/.pyenv/shims" >> $GITHUB_PATH
      - name: install dependencies
        run: |
          brew install pyenv
          pyenv install ${{ matrix.python-version }}
      - uses: actions/download-artifact@v3
        with:
          name: wheels
          path: dist
      - name: install wheel
        run: |
          pyenv local ${{ matrix.python-version }}
          python3 -m pip install --find-links $GITHUB_WORKSPACE/dist pycdfpp
      - uses: actions/checkout@v3
      - name: run tests
        run: |
          pyenv local ${{ matrix.python-version }}
          python3 -m pip install ddt requests
          python3 tests/full_corpus/test_full_corpus.py


  upload_pypi:
    needs: [build_osx_and_windows, build_linux, build_macos_arm, build_sdist, test_wheels, test_wheels_macos_arm]
    runs-on: ubuntu-latest
    # upload to PyPI only on github releases
    if: github.event_name == 'release' && github.event.action == 'published' && github.repository_owner == 'SciQLop'
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: source
          path: dist
      - uses: actions/download-artifact@v3
        with:
          name: wheels
          path: dist
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_PASSWORD }}
          skip-existing: true

  upload_test_pypi:
    needs: [build_osx_and_windows, build_linux, build_macos_arm, build_sdist, test_wheels]
    runs-on: ubuntu-latest
    # upload to test PyPI on github pushes
    if: github.event_name == 'push' && github.repository_owner == 'SciQLop'
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: source
          path: dist
      - uses: actions/download-artifact@v3
        with:
          name: wheels
          path: dist
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_TEST_PASSWORD }}
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
